#
# File:    NuRandomService.fcl
# Brief:   Default configuration for random seed service
# Author:  Gianluca Petrillo (petrillo@fnal.gov)
# Date:    February 5th, 2015
# Version: 1.0
# 
# The default configuration for the seed service uses the autoIncrement policy.
# 
# Use this as:
# 
# services.NuRandomService: @local::standard_NuRandomService
# 
# 
# Changes:
# 20150205 (petrillo@fnal.gov) [v1.0]
#   first version
#

BEGIN_PROLOG


autoincrement_NuRandomService: {
  # policy: autoIncrement
  # each time a seed is requested, a counter is increased and its value returned
  # as seed; the first seed returned is baseSeed
  policy            :    "autoIncrement"
  
  # this is the first seed that is returned;
  # override it with:
  # 
  # services.NuRandomService.baseSeed: MySeed
  # 
  baseSeed          : 2829
  
  # since this is a generic configuration and we don't know how many seeds there
  # are going to be around, we just skip the range check
  checkRange        : false
  
  # print into the log all seeds at the end of the job
  endOfJobSummary   :  true
} # autoincrement_NuRandomService


linearmapping_NuRandomService: {
  # policy: linearIncrement
  # each time a seed is requested, a counter is increased and its value returned
  # as seed; the first seed returned is nJob x maxUniqueEngines
  policy            :    "linearMapping"
  
  # this is the number of this job in an absolute batch count; override it with:
  # 
  # services.NuRandomService.nJob: NJOB
  #
  nJob            :  1
  maxUniqueEngines: 20
  
  # make sure that we don't try to use more engines than we are allowed;
  # that would mean overlapping random seeds with the next job
  checkRange      :  true
  
  # print into the log all seeds at the end of the job
  endOfJobSummary   :  true
} # linearmapping_NuRandomService


random_NuRandomService: {
  # policy: random
  # each time a seed is requested, a random number is returned.
  # 
  policy            :    "random"
  
  # if you really want this sequence of seeds to be reproducible,
  # insert here a seed for the random seed generator
  # baseSeed          : 64429
  
  # print into the log all seeds at the end of the job
  endOfJobSummary   :  true
} # random_NuRandomService


per_event_NuRandomService: {
  # policy: perEvent
  # on each event, the seed is computed from event information
  # 
  policy            :    "perEvent"
  
  # print into the log all seeds at the end of the job
  endOfJobSummary   :  false
} # per_event_NuRandomService


# choose our autoIncrement configuration as "standard"
standard_NuRandomService: @local::autoincrement_NuRandomService


END_PROLOG

