# Test the seed manager component of NuRandomService.
# 
# Policy:       perEvent
# Valid:        yes
# Will succeed: no
# Purpose:      events with invalid timestamp should not use EventTimestamp_v1
#               algorithm
#

#include "messageService.fcl"


process_name: SeedManagerTest


# Start form an empty source
source: {
  module_type : EmptyEvent
  maxEvents   : 2
} # source


services: {
  message : @local::mf_interactive
  RandomNumberGenerator: {}
  NuRandomService: {
   policy            : "perEvent"
   verbosity         :     2
   endOfJobSummary   :  true
 }
} # services


physics: {
  analyzers: {
    single: {
      module_type   : RandomManagerTest
      module_name   : single
      
    } # single
    
    multiple: {
      module_type   : RandomManagerTest
      module_name   : multiple
      
      instanceNames : [ "One", "Two" ]
      
      Seed_Two      : 12345
    } # multiple
    
    multipleAndUnmngd: {
      module_type   :   RandomManagerTest
      module_name   :   multipleAndUnmngd
      
      instanceNames :   [ "One", "Two", "Three" ]
      externalInstance: Unmanaged
      standardInstance: Standard
      
      Seed_Two      :   12345
      Seed_Three    :       0 # invalid seed => use NuRandomService
      Seed_Unmanaged:   12345
      Seed_Standard :   54321
    } # multipleAndUnmngd
    
    singleAndStandard: {
      module_type     : RandomManagerTest
      module_name     : singleAndStandard
      
      instanceNames   : [ "single" ]
      standardInstance: Standard
      
    } # singleAndStandard
    
    unmanaged: {
      module_type   :   RandomManagerTest
      module_name   :   unmanaged
      
      externalInstance: Unmanaged
    } # unmanaged
    
  } # analyzers
  
  e1       : [ single, multiple, multipleAndUnmngd, singleAndStandard, unmanaged ]
  end_paths: [ e1 ]
  
} # physics
