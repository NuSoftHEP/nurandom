# Test the seeds service.
# 
# Policy:       preDefinedOffset
# Valid:        no (one seed offset larger than the allowed range)
# Will succeed: yes
# Purpose:      check on seed range
# 
# This test configuration contains errors. The second module will fail (trying
# twice to use an offset higher than the largest offset we promised to use), so
# its configuration informs it of the expected failure.
# 
# Note that there are two expected errors: the test module asks for the seed
# twice to verify that the seed is always the same; each of the two calls will
# generate one error (as exception).
#

#include "messageService.fcl"

# Give this job a name.
process_name : SeedTestPredefinedOfs

# Start form an empty source
source :
{
  module_type : EmptyEvent
  maxEvents : 2
}

services :
{
  message : @local::mf_interactive
  RandomNumberGenerator: {}

  NuRandomService: {
    policy            : "preDefinedOffset"
    baseSeed          :     1
    maxUniqueEngines  :     6
    checkRange        :  true
    verbosity         :     2
    endOfJobSummary   :  true

    stest01 : {
      a : 2
      b : 4
    }

    stest02 : {
      a : 6
      c : 8
    }
  }

}

physics :
{
  analyzers: {
    stest01 : {
      module_type : SeedTestPolicy
      module_name : stest01
      instanceNames : [ "a", "b" ]
    }

    stest02 : {
      module_type : SeedTestPolicy
      module_name : stest02
      instanceNames : [ "a", "c" ]
      expectedErrors: 4
    }

  }

  e1 : [stest01, stest02]

  end_paths      : [e1]

}
